library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(org.Mm.eg.db)
library(RColorBrewer)
sampleinfo <- read.delim("./MouseData/SampleInfo_corrected.txt", stringsAsFactors = TRUE)
sampleinfo <- read.delim("./MouseData/SampleInfo_Corrected.txt", stringsAsFactors = TRUE)
sampleinfo
sampleinfo <- read.delim("./MouseData/SampleInfo_Corrected.txt", stringsAsFactors = TRUE)
# Ler o arquivo usando o caminho completo
sampleinfo <- read.delim("C:/Users/olive/Desktop/Bioinformática/2º Semestre/EDB/T4/codigo-aula4/MouseData/SampleInfo_corrected.txt", stringsAsFactors = TRUE)
View(sampleinfo)
seqdata <- read.delim("C:/Users/olive/Desktop/Bioinformática/2º Semestre/EDB/T4/codigo-aula4/MouseData/GSE60450_Lactation-GenewiseCounts.txt", stringsAsFactors = FALSE)
View(seqdata)
head(seqdata)
dim(seqdata)
# remove first two columns
countdata <- seqdata[,-(1:2)]
View(countdata)
# Store EntrezGeneID as rownames
rownames(countdata) <- seqdata[,1]
head(countdata)
colnames(countdata)
colnames(countdata) <- substr(colnames(countdata), 1, 7)
head(countdata)
table(colnames(countdata)==sampleinfo$SampleName)
# calculate counts per million
myCPM <- cpm(countdata)
head(myCPM)
# Which values in myCPM are greater than 0.5 in at least two samples
thresh <- myCPM > 0.5
keep <- rowSums(thresh) >= 2
counts.keep <- countdata[keep,]
summary(keep)
dim(counts.keep)
# create DGEList object
dgeObj <- DGEList(counts.keep)
View(dgeObj)
dgeObj
names(dgeObj)
dgeObj$samples
## distributions - log transform
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
## heatmaps
var_genes <- apply(logcounts, 1, var)
head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[sampleinfo$CellType]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## normalisation for composition bias
dgeObj <- calcNormFactors(dgeObj)
dgeObj$samples
plotMD(logcounts,column = 7)
abline(h=0,col="grey")
plotMD(dgeObj,column = 7)
abline(h=0,col="grey")
group <- paste(sampleinfo$CellType,sampleinfo$Status,sep=".")
group
# design
group <- as.character(group)
type <- sapply(strsplit(group, ".", fixed=T), function(x) x[1])
status <- sapply(strsplit(group, ".", fixed=T), function(x) x[2])
# Specify a design matrix with an intercept term
design <- model.matrix(~ type + status)
design
# estimating dispersion
dgeObj <- estimateCommonDisp(dgeObj)
dgeObj <- estimateGLMTrendedDisp(dgeObj)
dgeObj <- estimateTagwiseDisp(dgeObj)
View(design)
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(org.Mm.eg.db)
library(RColorBrewer)
library(TCGAbiolinks)
library(DESeq2)
# Carregamos os dados de expressão genética e dos dados clínicos
luad_data = GDCprepare(luad, summarizedExperiment = TRUE)
clin = GDCquery(
project = 'TCGA-LUAD',
data.category = 'Clinical',
data.type = 'Clinical Supplement',
data.format = 'BCR Biotab'
)
#GDCdownload(clin)
luad = GDCquery(
project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
experimental.strategy = 'RNA-Seq',
workflow.type = "STAR - Counts",
access = "open"
)
#GDCdownload(luad)
# Carregamos os dados de expressão genética e dos dados clínicos
luad_data = GDCprepare(luad, summarizedExperiment = TRUE)
clin_data = GDCprepare(clin)
#library(dplyr) ISTO ESTÁ ONDE?
# Carregamento, extração e transformação dos dados provenientes do RNAseq
seqdata = as.data.frame(assay(luad_data, 'unstranded'))
View(sampleinfo)
# Limitar ao tumour stage (alterar se necessário)
data_de = seqdata[,!is.na(luad_data$paper_Tumor.stage)]
# Metadados
ids = subset(luad_data$patient, !is.na(luad_data$paper_Tumor.stage))
tsage = subset(luad_data$paper_Tumor.stage, !is.na(luad_data$paper_Tumor.stage))
meta = data.frame(sample_id = ids, tumor_stage = tsage)
# Garantir que as dims estão corretas
dim(data_de)
dim(meta)
# Corrigir nomes e garantir ordem
# A nomenclatura original tinha extra carateres nos colnames dos dados de epressao
colnames(data_de) = meta$sample_id
all(names(data_de) == meta$sample_id)
# Análise exploratória
dim(data_de)
#head(data_de[,1:5])
any(is.na(data_de))
# Calculamos CPM
calccpm = cpm(data_de)
# Aparamos os dados, removendo genes com baixa expressão
# é geralmente aceite a eliminação de genes com CPM inferior a 0.5 em mais do que 2 amostras
thresh = calccpm > 0.5
keep = rowSums(thresh) >= 2
counts.keep = data_de[keep,]
summary(keep)
dim(counts.keep)
# Foram excluídos 28182 genes - ISTO ESTÁ BEM?
dim(data_de) - dim(counts.keep)
# Criar objetos para a análise de expr. diferencial
dgeObj = DGEList(counts.keep)
dgeObj
names(dgeObj)
dgeObj$samples
## distributions - log transform
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumor_stage]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
# Normalização
dgeObj = calcNormFactors(dgeObj)
# demo
plotMD(logcounts, column = 7)
abline(h=0,col="grey")
plotMD(dgeObj, column = 7)
abline(h=0,col="grey")
View(sampleinfo)
seqdata1 <- read.delim("C:/Users/olive/Desktop/Bioinformática/2º Semestre/EDB/T4/codigo-aula4/MouseData/GSE60450_Lactation-GenewiseCounts.txt", stringsAsFactors = FALSE)
head(seqdata1)
dim(seqdata1)
View(seqdata1)
# remove first two columns
countdata <- seqdata[,-(1:2)]
# remove first two columns
countdata <- seqdata1[,-(1:2)]
View(seqdata1)
# remove first two columns
countdata <- seqdata1[,-(1:2)]
View(countdata)
# Store EntrezGeneID as rownames
rownames(countdata) <- seqdata1[,1]
#library(dplyr) ISTO ESTÁ ONDE?
# Carregamento, extração e transformação dos dados provenientes do RNAseq
seqdata = as.data.frame(assay(luad_data, 'unstranded'))
View(seqdata)
colnames(countdata) <- substr(colnames(countdata), 1, 7)
table(colnames(countdata)==sampleinfo$SampleName)
# calculate counts per million
myCPM <- cpm(countdata)
head(myCPM)
# Which values in myCPM are greater than 0.5 in at least two samples
thresh <- myCPM > 0.5
keep <- rowSums(thresh) >= 2
counts.keep <- countdata[keep,]
summary(keep)
dim(counts.keep)
# create DGEList object
dgeObj <- DGEList(counts.keep)
dgeObj
View(dgeObj)
group <- paste(luad_data$paper_Tumor.stage, luad_data$gender, sep = ".")
type <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
design <- model.matrix(~ type + status)
dgeObj = estimateCommonDisp(dgeObj)
dgeObj = estimateGLMTrendedDisp(dgeObj)
dgeObj = estimateTagwiseDisp(dgeObj)
dgeObj = estimateCommonDisp(dgeObj)
#dgeObj = estimateGLMTrendedDisp(dgeObj)
#dgeObj = estimateTagwiseDisp(dgeObj)
View(dgeObj)
dgeObj = estimateCommonDisp(dgeObj)
#dgeObj = estimateGLMTrendedDisp(dgeObj)
#dgeObj = estimateTagwiseDisp(dgeObj)
dgeObj
dgeObj = estimateGLMTrendedDisp(dgeObj)
dgeObj
dgeObj = estimateTagwiseDisp(dgeObj)
dgeObj
design = model.matrix(~ type + status)
design
group = paste(luad_data$paper_Tumor.stage, luad_data$gender, sep = ".")
group <- as.character(group)
type = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
design = model.matrix(~ type + status)
group = paste(luad_data$paper_Tumor.stage, luad_data$gender, sep = ".")
group <- as.character(group[!is.na(group)])
type = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
design = model.matrix(~ type + status)
design = model.matrix(~ type + status)
design
group = paste(luad_data$paper_Tumor.stage, luad_data$gender, sep = ".")
group <- as.character(group[complete.cases(group)])
type = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
design = model.matrix(~ type + status)
design
View(design)
luad_data$paper_Tumor.stage
heads(luad_data$paper_Tumor.stage)
summary(luad_data$paper_Tumor.stage)
luad_data_clean = luad_data[luad_data$paper_Tumor.stage != "[Not Available]" & !is.na(luad_data$paper_Tumor.stage), ]
group = paste(luad_data$paper_Tumor.stage, luad_data$gender, sep = ".")
group <- as.character(group[complete.cases(group)])
type = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
design = model.matrix(~ type + status)
design
luad_data_clean = luad_data[luad_data$paper_Tumor.stage != "[Not Available]" & !is.na(luad_data$paper_Tumor.stage), ]
group = paste(luad_data_clean$paper_Tumor.stage, luad_data_clean$paper_Gender, sep = ".")
group <- as.character(group[complete.cases(group)])
type = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
design = model.matrix(~ type + status)
luad_data_clean = luad_data[luad_data$paper_Tumor.stage != "[Not Available]" & !is.na(luad_data$paper_Tumor.stage), ]
group = paste(luad_data_clean$paper_Tumor.stage, luad_data_clean$paper_Gender, sep = ".")
group = as.character(group)
type = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status = sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
design = model.matrix(~ type + status)
View(luad_data_clean)
luad_data_clean
luad_data_clean$paper_Tumor.stage
luad_data_clean <- luad_data[complete.cases(luad_data), ]
luad_data_clean <- na.omit(luad_data)
group <- paste(luad_data_clean$paper_Tumor.stage, luad_data_clean$paper_Gender, sep = ".")
group <- as.character(group)
type <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
luad_data_clean$paper_Tumor.stage
luad_data_clean$paper_Tumor.stage
group
luad_data_clean <- na.omit(luad_data)
group <- paste(luad_data_clean$paper_Tumor.stage, luad_data_clean$paper_Gender, sep = ".")
group <- as.character(group)
type <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
group
luad_data_clean <- luad_data[!is.na(luad_data$paper_Tumor.stage) & !is.na(luad_data$paper_Gender), ]
group <- paste(luad_data_clean$paper_Tumor.stage, luad_data_clean$paper_Gender, sep = ".")
group <- as.character(group)
type <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
group
luad_data_clean <- luad_data[!is.na(luad_data$paper_Tumor.stage) & !is.na(luad_data$paper_Gender), ]
group <- paste(luad_data_clean$paper_Tumor.stage, luad_data_clean$paper_Gender, sep = ".")
group <- as.character(group)
# Remove rows with NA values from the group variable
group <- group[complete.cases(group)]
type <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[1])
status <- sapply(strsplit(group, ".", fixed = TRUE), function(x) x[2])
group
