# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend(0.01,  1, legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend(0.01,  0.2, legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend(0.01,  0.3, legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend(0.01,  0.33, legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend(0.01,  0.31, legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend(0,  0.31, legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend(0.001,  0.31, legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend(0.1,  0.1, legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend("topright", legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend("toleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(10, 12))
# Adicione a legenda na parte inferior esquerda
legend("topleft", legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(5, 12))
legend("topleft", legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(5, 12))
legend("topleft", legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
dgeObj = calcNormFactors(dgeObj)
plotMD(logcounts, column = 7)
abline(h=0,col="grey")
plotMD(dgeObj, column = 7)
abline(h=0,col="grey")
dgeObj
# Substituir caracteres especiais nos valores de expr
meta_expr = gsub("prox.-prolif.", "prox_prolif", meta$expr)
meta_expr = gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
# Substituir caracteres especiais nos valores de expr
meta_expr = gsub("prox.-prolif.", "prox_prolif", meta$expr)
meta_expr = gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
View(meta)
# Substituir caracteres especiais nos valores de expr
meta_expr = gsub("prox.-prolif.", "prox_prolif", meta$expr)
meta_expr = gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
# Substituir caracteres especiais nos valores de expr
#meta_expr =
gsub("prox.-prolif.", "prox_prolif", meta$expr)
meta_expr = gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
# Substituir caracteres especiais nos valores de expr
#meta_expr =
gsub("prox.-prolif.", "prox_prolif", meta$expr)
#meta_expr =
gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
View(meta)
# Substituir caracteres especiais nos valores de expr
gsub("prox.-prolif.", "prox_prolif", meta$expr)
gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
# Substituir caracteres especiais nos valores de expr
gsub("prox.-prolif.", "prox_prolif", meta$expr)
gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
# Substituir caracteres especiais nos valores de expr
gsub("prox.-prolif.", "prox_prolif", meta$expr)
gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
View(meta)
levels(meta$expr)
# Substituir caracteres especiais nos valores de expr
gsub("prox.-prolif.", "prox_prolif", meta$expr)
# Substituir caracteres especiais nos valores de expr
gsub("prox.-prolif.", "prox_prolif", meta$expr)
gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
# Substituir caracteres especiais nos valores de expr
gsub("prox.-prolif.", "prox_prolif", meta$expr)
gsub("prox.-inflam", "prox_inflam", meta$expr)
meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
# Definir a variável de design
design = model.matrix(~ meta$expr)
head(design)
# Substituir caracteres especiais nos valores de expr
meta$expr <- gsub("prox.-prolif.", "prox_prolif", meta$expr)
meta$expr <- gsub("prox.-inflam", "prox_inflam", meta$expr)
#meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
# Substituir caracteres especiais nos valores de expr
meta$expr <- gsub("prox.-prolif.", "prox_prolif", meta$expr)
meta$expr <- gsub("prox.-inflam", "prox_inflam", meta$expr)
#meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
# Substituir caracteres especiais nos valores de expr
meta_expr <- gsub("prox.-prolif.", "prox_prolif", meta$expr)
meta_expr <- gsub("prox.-inflam", "prox_inflam", meta$expr)
#meta_expr = paste(meta$expr)
meta_expr = as.character(meta_expr)
meta_expr
levels(meta$expr)
# Substituir caracteres especiais nos valores de expr
gsub("prox.-prolif.", "prox_prolif", meta$expr)
gsub("prox.-inflam", "prox_inflam", meta$expr)
# Definir a variável de design
design = model.matrix(~ meta$expr)
head(design)
levels(meta$expr)
# Definir a variável de design
design = model.matrix(~ meta$expr)
head(design)
dgeObj = estimateCommonDisp(dgeObj)
dgeObj$common.dispersion
dgeObj = estimateGLMTrendedDisp(dgeObj)
