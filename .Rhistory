library(RWeka)
})
# Elaboração da query para conectar ao servidor GDC
#luad = GDCquery(
#  project = "TCGA-LUAD",
#  data.category = "Transcriptome Profiling",
#  experimental.strategy = 'RNA-Seq',
#  workflow.type = "STAR - Counts",
#  access = "open"
#)
# Transferência dos ficheiros
#GDCdownload(luad)
#' Carregamento dos ficheiros num objeto SummarizedExperiment
#'
#' O parâmetro save permite guardar o histórico num ficheiro compacto
#' tornando a leitura e carregamento numa próxima utilização mais ágil/rápida
#luad_data = GDCprepare(luad,
#                       save = TRUE,
#                       save.filename = 'luad_data_load.rda',
#                       summarizedExperiment = TRUE)
#' No próximo carregamento utilizar apenas o seguinte comando para não saturar o servidor e tornar o processo mais rápido
#' O ficheiro encontra-se aqui: https://ruisousa.me/luad_dataset/luad_data_load.rda
# Alteramos o working  directory para a raiz, para ser mais fácil utilizar as diferentes pastas (modelos, scripts, etc.)
#setwd('../')
# Carregamento do ficheiro
load('luad_data_load.rda')
luad_data = data
# Tamanho do objeto
dim(luad_data)
# Informação sobre o estudo
metadata(luad_data)
# Informação sobre os tipos de dados de RNASeq
names(assays(luad_data))
# Tipos de metadados associados a cada gene
names(rowData(luad_data))
# Tipos de metadados associados a cada amostra
names(colData(luad_data))
# Carregamento, extração e transformação dos dados provenientes do RNAseq
seqdata = as.data.frame(assay(luad_data, 'unstranded'))
#Verificação da inexistência de valores NA
any(is.na(seqdata))
gender = luad_data$gender
barcode = luad_data$barcode
expr = luad_data$paper_expression_subtype
meta = data.frame(barcode = barcode, gender = gender, expr = expr)
##Género
#Verificação da presença de NAs
any(is.na(meta$gender))
# Converte 'gender' para factor com dois níveis
meta$gender = factor(meta$gender, levels = c("male", "female"))
filter = meta$gender != '[Not Available]'
meta = meta[filter,]
#Dimensões da variável
table(meta$gender)
##Subtipos de expressão
#Verificação da presença de NAs
any(is.na(meta$expr))
#Eliminação das colunas correspondentes aos NAs
meta = meta[!is.na(meta$expr),]
filter = meta$expr != '[Not Available]'
meta = meta[filter,]
#Verificação da eliminação dos NAs
any(is.na(meta$expr))
#Dimensões da variável
table(meta$expr)
length(meta$expr)
#Definir níveis
levels(meta$expr) = c("TRU", "prox_prolif", "prox_inflam")
seqdata_filter = seqdata[,meta$expr]
# Garantir que as dims estão corretas
dim(seqdata_filter)
dim(meta)
# Corrigir nomes e garantir ordem
colnames(seqdata_filter) = meta$barcode
all(names(seqdata_filter) == meta$barcode)
# Cálculo CPM
calccpm = cpm(seqdata_filter)
# Remoção de genes com baixa expressão
thresh = calccpm > 0.5
keep = rowSums(thresh) >= 2
counts_keep = seqdata_filter[keep,]
summary(keep)
dim(counts_keep)
# Importar o pacote
library(EnsDb.Hsapiens.v79)
# Obter os nomes de linha do dataframe counts_keep
rownames(counts_keep) = gsub("\\..*", "", rownames(counts_keep))
# Selecionar os símbolos de gene correspondentes aos nomes de linha existentes
gene_symbols <- ensembldb::select(EnsDb.Hsapiens.v79, keys = nomes_linha, keytype = "GENEID", columns = c("SYMBOL","GENEID"))
# Importar o pacote
library(EnsDb.Hsapiens.v79)
# Obter os nomes de linha do dataframe counts_keep
rownames(counts_keep) = gsub("\\..*", "", rownames(counts_keep))
# Selecionar os símbolos de gene correspondentes aos nomes de linha existentes
gene_symbols <- ensembldb::select(EnsDb.Hsapiens.v79, keys = rownames(counts_keep), keytype = "GENEID", columns = c("SYMBOL","GENEID"))
#Alteração dos valores duplicados
indice_duplicados = which(duplicated(gene_symbols$SYMBOL))
# Percorre os índices das linhas duplicadas
for (indice in indice_duplicados) {
# Adiciona "_" ao conteúdo da linha
gene_symbols$SYMBOL[indice] <- paste(gene_symbols$SYMBOL[indice], "_", sep = "")
}
indice_duplicados_2 = which(duplicated(gene_symbols$SYMBOL))
# Percorre os índices das linhas duplicadas
for (indice in indice_duplicados_2) {
# Adiciona "_" ao conteúdo da linha
gene_symbols$SYMBOL[indice] <- paste(gene_symbols$SYMBOL[indice], "_", sep = "")
}
which(duplicated(gene_symbols$SYMBOL))
# Iterar sobre os nomes das linhas em counts_keep
for (i in 1:nrow(counts_keep)) {
# Verificar se o nome da linha em counts_keep está presente em gene_symbols$GENEID
if (rownames(counts_keep)[i] %in% gene_symbols$GENEID) {
# Substituir o nome da linha pelo valor correspondente em gene_symbols$SYMBOL
rownames(counts_keep)[i] <- gene_symbols$SYMBOL[gene_symbols$GENEID == rownames(counts_keep)[i]]
}
}
dgeObj = DGEList(counts_keep)
names(dgeObj)
head(dgeObj$samples)
View(counts_keep)
# distribuições - transformação logarítmica
logcounts = cpm(dgeObj,log=TRUE)
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 30 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:30]
select_var
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
# Criação do mapa dos 30 genes mais variáveis entre todas as amostras
mypalette = brewer.pal(9,"RdYlBu")
morecols = colorRampPalette(mypalette)
labels = levels(meta$expr)
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis",
ColSideColors=col.cell1,scale="row",
margins = c(5, 12))
legend("topleft", legend=labels, fill=c("purple","orange","green"))
# Criação do mapa dos 30 genes mais variáveis entre 50 amostras
labels = levels(meta$expr)
col.cell2 = c("purple","orange", "green")[meta$expr][1:50]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 30 genes mais variáveis entre 50 amostras aleatórias",
ColSideColors=col.cell2,scale="row",
margins = c(5, 12))
legend("bottomleft", legend=labels, fill=c("purple","orange","green"))
dgeObj = calcNormFactors(dgeObj)
plotMD(logcounts, column = 7)
abline(h=0,col="grey")
plotMD(dgeObj, column = 7)
abline(h=0,col="grey")
# Substituir caracteres especiais nos valores de expr
meta$expr = gsub("prox.-inflam", "prox_inflam", meta$expr)
meta$expr = gsub("prox.-prolif.", "prox_prolif", meta$expr)
# Definir a variável de design
design = model.matrix(~ meta$expr)
head(design)
dgeObj = estimateCommonDisp(dgeObj)
dgeObj$common.dispersion
dgeObj = estimateGLMTrendedDisp(dgeObj)
dgeObj = estimateTagwiseDisp(dgeObj)
plotBCV(dgeObj)
fit = glmFit(dgeObj, design)
head(fit$coefficients)
lrt.BvsL = glmLRT(fit, coef = 2)
topTags(lrt.BvsL)
results_PP <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results_PP
dim(results_PP)
summary(de <- decideTestsDGE(lrt.BvsL))
detags <- rownames(dgeObj)[as.logical(de)]
plotSmear(lrt.BvsL, de.tags=detags)
signif <- -log10(results_PP$FDR)
plot(results_PP$logFC,signif,pch=16)
points(results_PP[detags,"logFC"],-log10(results_PP[detags,"FDR"]),pch=16,col="red")
lrt.BvsL = glmLRT(fit, coef = 3)
topTags(lrt.BvsL)
results_TRU <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results_TRU
dim(results_TRU)
summary(de <- decideTestsDGE(lrt.BvsL))
detags <- rownames(dgeObj)[as.logical(de)]
plotSmear(lrt.BvsL, de.tags=detags)
signif <- -log10(results_TRU$FDR)
plot(results_TRU$logFC,signif,pch=16)
points(results_TRU[detags,"logFC"],-log10(results_TRU[detags,"FDR"]),pch=16,col="red")
# Function: Adjacency matrix to list -------------------------
matrix_to_list <- function(pws){
pws.l <- list()
for (pw in colnames(pws)) {
pws.l[[pw]] <- rownames(pws)[as.logical(pws[, pw])]
}
return(pws.l)
}
## Function: prepare_gmt --------------------------------------
prepare_gmt <- function(gmt_file, genes_in_data, savefile = FALSE){
# for debug
#file <- gmt_files[1]
#genes_in_data <- df$gene_symbol
# Read in gmt file
gmt <- gmtPathways(gmt_file)
hidden <- unique(unlist(gmt))
# Convert gmt file to a matrix with the genes as rows and for each go annotation (columns) the values are 0 or 1
mat <- matrix(NA, dimnames = list(hidden, names(gmt)),
nrow = length(hidden), ncol = length(gmt))
for (i in 1:dim(mat)[2]){
mat[,i] <- as.numeric(hidden %in% gmt[[i]])
}
#Subset to the genes that are present in our data to avoid bias
hidden1 <- intersect(genes_in_data, hidden)
mat <- mat[hidden1, colnames(mat)[which(colSums(mat[hidden1,])>5)]] # filter for gene sets with more than 5 genes annotated
# And get the list again
final_list <- matrix_to_list(mat) # for this we use the function we previously defined
if(savefile){
saveRDS(final_list, file = paste0(gsub('.gmt', '', gmt_file), '_subset_', format(Sys.time(), '%d%m'), '.RData'))
}
#print('Wohoo! .gmt conversion successfull!:)') # optional
return(final_list)
}
#Variável
my_genes_PP = rownames(results_PP)
my_genes_TRU = rownames(results_TRU)
# ordenar os resultados por ordem decrescente dos valores da coluna "logFC"
results_PP.ord = results_PP[ order(-results_PP[,"logFC"]), ]
results_TRU.ord = results_TRU[ order(-results_TRU[,"logFC"]), ]
# somar um pseudo valor a resultados com valores de "logFC" iguais para permitir um desempate entre "logFC duplicados" e não surgirem problemas ao correr a função fgsea.
epsilon_PP = runif(sum(duplicated(results_PP.ord$logFC)), min = 0, max = .001)
results_PP.ord$logFC[duplicated(results_PP.ord$logFC)] = results_PP.ord$logFC[duplicated(results_PP.ord$logFC)] + epsilon_PP
epsilon_TRU = runif(sum(duplicated(results_TRU.ord$logFC)), min = 0, max = .001)
results_TRU.ord$logFC[duplicated(results_TRU.ord$logFC)] = results_TRU.ord$logFC[duplicated(results_TRU.ord$logFC)] + epsilon_TRU
# criar uma variável com todos os genes do dataset e os respetivos valores de "logFC"
ranks_PP = results_PP.ord$logFC
ranks_TRU = results_TRU.ord$logFC
names(ranks_PP) = rownames(results_PP.ord)
names(ranks_TRU) = rownames(results_TRU.ord)
head(ranks_PP)
head(ranks_TRU)
#ranks <- sort(ranks, decreasing = TRUE) # sort genes by ranking
plot(ranks_PP)
plot(ranks_TRU)
barplot(ranks_PP)
barplot(ranks_TRU)
# Carregar ficheiro gmt
#setwd('../')
# Nota: Necessário fornecer o caminho com a localização do ficheiro
#bg_genes_PP = prepare_gmt("~/h.all.v2023.2.Hs.symbols.gmt", vector_PP, savefile = #FALSE)
bg_genes_PP = prepare_gmt("./gene_sets/h.all.v2023.2.Hs.symbols.gmt", my_genes_PP, savefile = FALSE)
#bg_genes_TRU = prepare_gmt("~/h.all.v2023.2.Hs.symbols.gmt", vector_TRU, savefile #= FALSE)
bg_genes_TRU = prepare_gmt("./gene_sets/h.all.v2023.2.Hs.symbols.gmt", my_genes_TRU, savefile = FALSE)
# Some genes have such low p values that the signed pval is +- inf, we need to change it to the maximum * constant to avoid problems with fgsea
max_ranking_PP <- max(ranks_PP[is.finite(ranks_PP)])
min_ranking_PP <- min(ranks_PP[is.finite(ranks_PP)])
rankings_PP <- replace(ranks_PP, ranks_PP > max_ranking_PP, max_ranking_PP * 10)
rankings_PP <- replace(ranks_PP, ranks_PP < min_ranking_PP, min_ranking_PP * 10)
rankings_PP <- sort(ranks_PP, decreasing = TRUE) # sort genes by ranking
max_ranking_TRU <- max(ranks_TRU[is.finite(ranks_TRU)])
min_ranking_TRU <- min(ranks_TRU[is.finite(ranks_TRU)])
rankings_TRU <- replace(ranks_TRU, ranks_TRU > max_ranking_TRU, max_ranking_TRU * 10)
rankings_TRU <- replace(ranks_TRU, ranks_TRU < min_ranking_TRU, min_ranking_TRU * 10)
rankings_TRU <- sort(ranks_TRU, decreasing = TRUE) # sort genes by ranking
# rankings of first 50 genes for the "exprprox.-inflam" coefficient
ggplot(data.frame(gene_symbol = names(ranks_PP)[1:50], ranks = ranks_PP[1:50]), aes(gene_symbol, ranks)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# rankings of first 50 genes for the "exprTRU" coefficient
ggplot(data.frame(gene_symbol = names(ranks_TRU)[1:50], ranks = ranks_TRU[1:50]), aes(gene_symbol, ranks)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Correr fgsea
fgseaRes_PP <- fgsea(pathways = bg_genes_PP,
stats = rankings_PP,
scoreType = 'std',
minSize=15,
maxSize = 500)
class(fgseaRes_PP)
dim(fgseaRes_PP)
head(fgseaRes_PP[order(padj), ])
sum(fgseaRes_PP[, padj < 0.05]) #Número de pathways significantes
#  principais vias para o coeficiente PI
topPathwaysUp_PP <- fgseaRes_PP[ES > 0][head(order(padj), n = 25), pathway]
topPathwaysDown_PP <- fgseaRes_PP[ES < 0][head(order(padj), n = 5), pathway]
topPathways_PP <- c(topPathwaysUp_PP, rev(topPathwaysDown_PP))
plotGseaTable(bg_genes_PP[topPathways_PP], stats = rankings_PP, fgseaRes = fgseaRes_PP, gseaParam = 0.5)
# Correr fgsea
fgseaRes_TRU <- fgsea(pathways = bg_genes_TRU,
stats = rankings_TRU,
scoreType = 'std',
minSize=15,
maxSize = 500)
class(fgseaRes_TRU)
dim(fgseaRes_TRU)
head(fgseaRes_TRU[order(padj), ])
sum(fgseaRes_TRU[, padj < 0.05])
# principais vias para o coeficiente TRU
topPathwaysUp_TRU <- fgseaRes_TRU[ES > 0][head(order(padj), n = 25), pathway]
topPathwaysDown_TRU <- fgseaRes_TRU[ES < 0][head(order(padj), n = 5), pathway]
topPathways_TRU <- c(topPathwaysUp_TRU, rev(topPathwaysDown_TRU))
plotGseaTable(bg_genes_TRU[topPathways_TRU], stats = rankings_TRU, fgseaRes = fgseaRes_TRU, gseaParam = 0.5)
# para PI
plotEnrichment(bg_genes_PP[[head(fgseaRes_PP[order(padj), ], 1)$pathway]],
rankings_PP) +
labs(title = head(fgseaRes_PP[order(padj), ], 1)$pathway)
# para TRU
plotEnrichment(bg_genes_TRU[[head(fgseaRes_TRU[order(padj), ], 1)$pathway]],
rankings_TRU) +
labs(title = head(fgseaRes_TRU[order(padj), ], 1)$pathway)
View(meta)
data_normal <- counts_keep
# Obter os nomes das colunas em data_normal
nomes_colunas = colnames(data_normal)
# Obter os sample_id correspondentes em meta
barcode_meta = meta$barcode
data_normal <- counts_keep
# Obter os nomes das colunas em data_normal
nomes_colunas = colnames(data_normal)
# Obter os sample_id correspondentes em meta
barcode_meta = meta$barcode
# Encontrar as correspondências entre os sample_id em data_normal e meta
indices_correspondentes = match(nomes_colunas, barcode_meta)
data_normal <- counts_keep
# Obter os nomes das colunas em data_normal
nomes_colunas = colnames(data_normal)
# Obter os sample_id correspondentes em meta
barcode_meta = meta$barcode
# Encontrar as correspondências entre os sample_id em data_normal e meta
indices_correspondentes = match(nomes_colunas, barcode_meta)
# Obter os valores de expr correspondentes
valores_expr = meta$expr[indices_correspondentes]
data_normal <- counts_keep
# Obter os nomes das colunas em data_normal
nomes_colunas = colnames(data_normal)
# Obter os sample_id correspondentes em meta
barcode_meta = meta$barcode
# Encontrar as correspondências entre os sample_id em data_normal e meta
indices_correspondentes = match(nomes_colunas, barcode_meta)
# Obter os valores de expr correspondentes
valores_expr = meta$expr[indices_correspondentes]
# Adicionar os valores de expr ao nome das colunas em data_normal no início
colnames(data_normal) = paste(valores_expr, nomes_colunas, sep = "_")
View(data_normal)
pca = prcomp(data_normal, center = F)
fviz_eig(pca, addlabels = TRUE)
fviz_pca_var(pca, col.var = "cos2",
gradient.cols = c("#FFCC00", "#CC9933", "#660033", "#330033"),
repel = TRUE)
plot(pca$x[,1], pca$x[,2], col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
pca = prcomp(data_normal, center = F)
plot(pca$x[,1], pca$x[,2], col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
pca_gene = prcomp(t(data_normal))
plot(pca_gene$x[,1], pca_gene$x[,2],  col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
plot(pca$x[,1], pca$x[,2], col = as.character(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
plot(pca$x[,1], pca$x[,2], pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
meta$barcode = colnames(data_normal)
plot(pca$x[,1], pca$x[,2], pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
plot(pca$x[,1], pca$x[,2], col = as.integer(meta$expr) pch = 16, xlab = "PC1", ylab = "PC2")
plot(pca$x[,1], pca$x[,2], col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
plot(pca$x[,1], pca$x[,2], pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
pca_gene = prcomp(t(data_normal))
plot(pca_gene$x[,1], pca_gene$x[,2],  col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
pca_genes = data.frame(Sample=rownames(pca_gene$x), X = pca_gene$x[,1], Y = pca_gene$x[,2])
loading_scores = pca_gene$rotation[,1]
gene_scores = abs(loading_scores)
#ordenar a loading score por ordem descrescente
gene_score_ranked = sort(gene_scores, decreasing = TRUE)
#top 10 genes em valor absoluto
top_10_genes = names(gene_score_ranked[1:10])
top_10_genes
pca_gene$rotation[top_10_genes,1]
meta$barcode = colnames(data_normal)
rownames(meta) = meta$barcode
pca = prcomp(data_normal, center = F)
plot(pca$x[,1], pca$x[,2], pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
plot(pca$x[,1], pca$x[,2], col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
meta$expr = factor(meta$expr)
plot(pca$x[,1], pca$x[,2], col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
pca_gene = prcomp(t(data_normal))
plot(pca_gene$x[,1], pca_gene$x[,2],  col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
plot(pca_gene$x[,1], pca_gene$x[,2],  col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
legend(-8000000,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
plot(pca_gene$x[,1], pca_gene$x[,2],  col = as.integer(meta$expr), pch = 16, xlab = "PC1", ylab = "PC2")
legend(0,0,legend=levels(meta$expr), col=c("black","pink", "green"), pch=19)
View(results_PP)
# Para subtipo PP -> primeiros 30 genes
genes_30_pp <- head(results_PP.ord, 30)
View(genes_30_pp)
# Para subtipo PP -> primeiros 30 genes
genes_30_pp <- names(head(results_PP.ord, 30))
# Para subtipo PP -> primeiros 30 genes
genes_30_pp <- colnames(head(results_PP.ord, 30))
# Para subtipo PP -> primeiros 30 genes
genes_30_pp <- rownames(head(results_PP.ord, 30))
# Para subtipo PP -> primeiros 30 genes
genes_30_pp <- rownames(head(results_PP.ord, 30))
# Para subtipo PP -> primeiros 30 genes
genes_30_pp <- rownames(head(results_PP.ord, 30))
data_30_pp <- data_normal[genes_30_pp, , drop = FALSE]
View(data_30_pp)
#cálculo da matriz de distâncias
dist_data_30_pp = dist(data_30_pp, method = "euclidean")
cmd.mds  = cmdscale(dist_data_30_pp, 3, eig = TRUE)
library(ggpubr)
colnames(mds) <- c("Dim.1", "Dim.2")
library(ggpubr)
colnames(dist_data_30_pp) <- c("Dim.1", "Dim.2")
var.pc1 = sum(cmd.mds$eig[1])/sum(abs(cmd.mds$eig)) * 100
var.pc2 = sum(cmd.mds$eig[2])/sum(abs(cmd.mds$eig)) * 100
var.pc3 = sum(cmd.mds$eig[3])/sum(abs(cmd.mds$eig)) * 100
lab.pc1 = paste("Coordinate 1", sprintf((var.%.3f", var.pc1), %)))
lab.pc1 <- paste("Coordinate 1", sprintf("(var %.3f)", var.pc1))
lab.pc2 = paste("Coordinate 2", sprintf((var.%.3f", var.pc2), "%)))
lab.pc1 <- paste("Coordinate 1", sprintf("(var %.3f)", var.pc1))
lab.pc2 <- paste("Coordinate 2", sprintf("(var %.3f)", var.pc2))
par(mfrow = c(1,1))
plot(cmd.mds$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,main="")
mcols = rep("gray", length(data_normal))
#mcols[iris[,5]=="setosa"] = "blue"
#mcols[iris[,5]=="versicolor"] = "red”
#mcols[iris[,5]=="virginica"] = "green"
plot(cmd.mds$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,col= mcols, pch =
19, main="")
plot(ord$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,main="", col= mcols,
pch = 19)
mcols = rep("gray", length(dist_data_30_pp))
#mcols[iris[,5]=="setosa"] = "blue"
#mcols[iris[,5]=="versicolor"] = "red”
#mcols[iris[,5]=="virginica"] = "green"
plot(cmd.mds$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,col= mcols, pch =
19, main="")
plot(ord$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,main="", col= mcols,
pch = 19)
mcols = rep("gray", length(dist_data_30_pp))
#mcols[iris[,5]=="setosa"] = "blue"
#mcols[iris[,5]=="versicolor"] = "red”
#mcols[iris[,5]=="virginica"] = "green"
plot(cmd.mds$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,col= mcols, pch =
19, main="")
#plot(ord$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,main="", col= mcols,
#pch = 19)
mcols = rep("gray", length(dist_data_30_pp))
mcols[meta=="TRU"] = "blue"
mcols[meta=="prox_inflam"] = "red”
mcols[meta=="prox_prolif"] = "green"
mcols <- rep("gray", length(dist_data_30_pp))
mcols[meta == "TRU"] <- "blue"
mcols[meta == "prox_inflam"] <- "red"
mcols[meta == "prox_prolif"] <- "green"
plot(cmd.mds$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,col= mcols, pch =
19, main="")
#plot(ord$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,main="", col= mcols,
#pch = 19)
ord = isoMDS(dist_data_30_pp, k=3)
library(MASS)
ord = isoMDS(dist_data_30_pp, k=3)
mcols <- rep("gray", length(dist_data_30_pp))
mcols[meta == "TRU"] <- "blue"
mcols[meta == "prox_inflam"] <- "red"
mcols[meta == "prox_prolif"] <- "green"
plot(cmd.mds$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,col= mcols, pch =
19, main="")
plot(ord$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,main="", col= mcols, pch = 19)
# Para subtipo TRU -> primeiros 30 genes
genes_30_tru <- rownames(head(results_TRU.ord, 30))
data_30_tru <- data_normal[genes_30_tru, , drop = FALSE]
#cálculo da matriz de distâncias
dist_data_30_tru = dist(data_30_tru, method = "euclidean")
cmd.mds_tru  = cmdscale(dist_data_30_tru, 3, eig = TRUE)
var.pc1_tru = sum(cmd.mds_tru$eig[1])/sum(abs(cmd.mds_tru$eig)) * 100
var.pc2_tru = sum(cmd.mds_tru$eig[2])/sum(abs(cmd.mds_tru$eig)) * 100
var.pc3_tru = sum(cmd.mds_tru$eig[3])/sum(abs(cmd.mds_tru$eig)) * 100
par(mfrow = c(1,1))
plot(cmd.mds_tru$points[,c(1,2)],xlab=lab.pc1,ylab=lab.pc2,main="")
hc = hclust(dist_data_30_pp, method = "complete")
plot(hc)
my.plot.hc (hc, meta$expr, cex = 0.5)
hc = hclust(dist_data_30_pp, method = "complete")
plot(hc)
my.plot.hc(hc, meta$expr, cex = 0.5)
hc = hclust(dist_data_30_pp, method = "complete")
plot(hc)
hc = hclust(dist_data, method = "average")
hc = hclust(dist_data_30_pp, method = "average")
plot(hc)
# Bibliotecas necessárias
library(cluster)
library(ggpubr)
library(ggrepel)
# Formar clusters utilizando o agrupamento K-mean
kmeans_clusters = kmeans(cmd.mds, centers = 3)$cluster
resKmeans <- kmeans(dist_data_30_pp,centers=3)
plot(dist_data_30_pp$x,dist_data_30_pp$y, col=resKmeans$cluster, pch=19, cex=1.5)
kmeans.iris = kmeans(data_30_pp, centers = 3, nstart = 10000)
kmeans_pp = kmeans(data_30_pp, centers = 3, nstart = 10000)
table(kmeans_pp$cluster, meta$expr)
