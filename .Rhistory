expr_dge
gender_dge = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
#expr_dge = sapply(strsplit(group, ".", fixed=T), function(x) x[2])
expr_dge <- sub(".*?\\.", "", group)
# Definir a variável de design
#design <- model.matrix(~ group_clean)
expr_dge
gender
count(gender)
count(gender_dge)
length(gender)
length(gender_dge)
gender_dge = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
expr_dge = sub(".*?\\.", "", group)
# Definir a variável de design
design = model.matrix(~ gender_dge + expr_dge)
gender_dge = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
expr_dge = sub(".*?\\.", "", group)
# Definir a variável de design
design = model.matrix(~ gender_dge + expr_dge)
design
gender_dge = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
expr_dge = sub(".*?\\.", "", group)
# Definir a variável de design
design = model.matrix(~ gender_dge + expr_dge)
dgeObj = estimateCommonDisp(dgeObj)
dgeObj
dgeObj = estimateCommonDisp(dgeObj)
dgeObj$common.dispersion
dgeObj$pseudo.lib.size
dgeObj = estimateGLMTrendedDisp(dgeObj)
dgeObj$trended.dispersion
dgeObj$trend.method
dgeObj = estimateTagwiseDisp(dgeObj)
plotBCV(dgeObj)
dgeObj$tagwise.dispersion
plotBCV(dgeObj)
dgeObj = estimateCommonDisp(dgeObj, verbose = T)
dgeObj$common.dispersion
dgeObj = estimateCommonDisp(dgeObj)
dgeObj$common.dispersion
dgeObj = estimateGLMTrendedDisp(dgeObj)
fit = glmFit(dgeObj, design)
names(fit)
head(coef(fit))
head(fit$coefficients)
fit = glmFit(dgeObj, design)
head(fit$coefficients)
lrt.BvsL <- glmLRT(fit, coef=2)
topTags(lrt.BvsL)
results <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results
dim(results)
summary(de <- decideTestsDGE(lrt.BvsL))
lrt.BvsL <- glmLRT(fit, coef=1)
topTags(lrt.BvsL)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
levels(gender_dge)
levels(expr_dge)
group = paste(meta$gender, meta$expr, sep = ".")
#group = as.character(group)
group
gender_dge = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
expr_dge = sub(".*?\\.", "", group)
# Definir a variável de design
design = model.matrix(~ gender_dge + expr_dge)
levels(gender_dge)
levels(expr_dge)
gender_dge = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender_dge <- factor(gender_dge, levels = c("female", "male"))
expr_dge = sub(".*?\\.", "", group)
expr_dge <- factor(expr_dge, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ gender_dge + expr_dge)
levels(gender_dge)
levels(expr_dge)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
levels(gender_dge)
levels(expr_dge)
contrasts(gender_dge) <- contr.treatment(levels(gender_dge))
contrasts(expr_dge) <- contr.treatment(levels(expr_dge))
contrasts(gender_dge) <- contr.treatment(levels(gender_dge))
contrasts(expr_dge) <- contr.treatment(levels(expr_dge))
gender_dge = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender_dge <- factor(gender_dge, levels = c("female", "male"))
expr_dge = sub(".*?\\.", "", group)
expr_dge <- factor(expr_dge, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ gender_dge + expr_dge)
contrasts(gender_dge) <- contr.treatment(levels(gender_dge))
contrasts(expr_dge) <- contr.treatment(levels(expr_dge))
contrasts(gender_dge) <- contr.treatment(levels(gender_dge))
contrasts(expr_dge) <- contr.treatment(levels(expr_dge))
design <- model.matrix(~ gender_dge + expr_dge)
contrasts(gender_dge) <- contr.treatment(levels(gender_dge))
contrasts(expr_dge) <- contr.treatment(levels(expr_dge))
design <- model.matrix(~ gender_dge + expr_dge)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
levels(expr_dge)
contrasts(expr_dge)
unique(gender_dge)
View(meta)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender <- factor(gender_dge, levels = c("female", "male"))
expr = sub(".*?\\.", "", group)
expr <- factor(expr_dge, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ gender + expr)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
expr
levels(meta$expr)
levels(meta$expr)
levels(design)
levels(meta$expr)
levels(expr)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender <- factor(gender_dge, levels = c("female", "male"))
expr_levels <- levels(meta$expr)
expr = factor(expr, levels = expr_levels)
expr = sub(".*?\\.", "", group)
expr <- factor(expr_dge, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ gender + expr)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
gender_levels = levels(meta$gender)
gender= factor(gender, levels = gender_levels)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender <- factor(gender_dge, levels = c("female", "male"))
expr_levels <- levels(meta$expr)
expr = factor(expr, levels = expr_levels)
expr = sub(".*?\\.", "", group)
expr <- factor(expr_dge, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ gender + expr)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
levels(meta$expr)
levels(expr)
levels(meta$expr)=levels(expr)
levels(meta$expr)=levels(expr)
levels(meta$expr)==levels(expr)
levels(meta$expr)==levels(expr)
levels(meta$gender) == levels(gender)
levels(meta$expr)==levels(expr)
levels(meta$gender) == levels(gender)
levels(meta$gender)
levels(meta$expr)==levels(expr)
levels(meta$gender) == levels(gender)
levels(meta$gender)
levels(gender)
gender_levels = levels(meta$gender)
gender= factor(gender, levels = gender_levels)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender = factor(gender, levels = c("female", "male"))
expr_levels <- levels(meta$expr)
expr = factor(expr, levels = expr_levels)
expr = sub(".*?\\.", "", group)
expr <- factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ gender + expr)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
levels(meta$expr)==levels(expr)
levels(meta$gender) == levels(gender)
levels(meta$gender)
levels(gender)
levels(meta$gender)
levels(gender_dge)
levels(meta$expr)
levels(expr)
gender_levels <- levels(meta$gender)
gender_dge <- factor(gender_dge, levels = gender_levels)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender = factor(gender, levels = c("male", "female"))
expr_levels <- levels(meta$expr)
expr = factor(expr, levels = expr_levels)
expr = sub(".*?\\.", "", group)
expr <- factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ gender + expr)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
levels(meta$gender)
levels(gender_dge)
levels(meta$expr)
levels(expr)
#gender_levels <- levels(meta$gender)
#gender_dge <- factor(gender_dge, levels = gender_levels)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
#gender = factor(gender, levels = c("male", "female"))
#expr_levels <- levels(meta$expr)
#expr = factor(expr, levels = expr_levels)
expr = sub(".*?\\.", "", group)
#expr <- factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ gender + expr)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
levels(meta$gender)
levels(gender_dge)
levels(meta$expr)
levels(expr)
#gender_levels <- levels(meta$gender)
#gender_dge <- factor(gender_dge, levels = gender_levels)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
#gender = factor(gender, levels = c("male", "female"))
#expr_levels <- levels(meta$expr)
#expr = factor(expr, levels = expr_levels)
expr = sub(".*?\\.", "", group)
#expr <- factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ expr + gender)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
levels(meta$gender)
levels(gender_dge)
levels(meta$expr)
levels(expr)
# Check the first few elements of the 'group' variable
head(group)
# Compare 'group' with 'gender' and 'expr'
data.frame(group, gender, expr)
# Check the dimensions and column names of the 'design' matrix
dim(design)
colnames(design)
# Check the levels of gender and expr in the design matrix
levels(design$gender)
# Inspect the structure and levels of gender and expr before creating the design matrix
str(gender)
str(expr)
#gender_levels <- levels(meta$gender)
#gender_dge <- factor(gender_dge, levels = gender_levels)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender = factor(gender, levels = c("male", "female"))
#expr_levels <- levels(meta$expr)
#expr = factor(expr, levels = expr_levels)
expr = sub(".*?\\.", "", group)
expr <- factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ expr + gender)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
#gender_levels <- levels(meta$gender)
#gender_dge <- factor(gender_dge, levels = gender_levels)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
# Convert gender to a factor with the correct levels and order
gender <- factor(gender, levels = c("male", "female"))
#expr_levels <- levels(meta$expr)
#expr = factor(expr, levels = expr_levels)
expr = sub(".*?\\.", "", group)
expr <- factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ expr + gender)
dim(design)  # Check the dimensions
colnames(design)  # Check the column names
# Inspect the structure and levels of gender and expr before creating the design matrix
str(gender)
str(expr)
colnames(design)
colnames(design)
levels(expr)
suppressMessages({
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(org.Mm.eg.db)
library(RColorBrewer)
library(TCGAbiolinks)
library(SummarizedExperiment)
})
# Alternativamente para quando o servidor está em baixo
luad_data = load('luad_data_load.rda')
luad_data = data
# Tamanho do objeto
dim(luad_data)
# Informação sobre o estudo
metadata(luad_data)
# Informação sobre os tipos de dados de RNASeq
names(assays(luad_data))
# Tipos de metadados associados a cada gene
names(rowData(luad_data))
# Tipos de metadados associados a cada amostra
names(colData(luad_data))
# Carregamento, extração e transformação dos dados provenientes do RNAseq
seqdata = as.data.frame(assay(luad_data, 'unstranded'))
#Verificação da inexistência de valores NA
any(is.na(seqdata))
# Carregamento de metadados
gender = luad_data$gender
sample_id = substr(luad_data$sample_id, 1, 10)
expr = luad_data$paper_expression_subtype
meta = data.frame(sample_id = sample_id, gender = gender, expr = expr)
# Limpeza dos dados e tratamento relativo ao género
any(is.na(meta$gender))
# Converte 'gender' para factor com dois níveis
meta$gender = factor(meta$gender, levels = c("male", "female"))
table(meta$gender)
filter = meta$gender != '[Not Available]'
meta = meta[filter,]
any(is.na(meta$expr))
meta = meta[!is.na(meta$expr),]
table(meta$expr)
filter = meta$expr != '[Not Available]'
meta = meta[filter,]
# Criar uma vista dos dados de RNASeq com base nos subtipos de expressão
seqdata_filter = seqdata[,meta$expr]
# Garantir que as dims estão corretas
dim(seqdata_filter)
dim(meta)
# Corrigir nomes e garantir ordem
colnames(seqdata_filter) = meta$sample_id
all(names(seqdata_filter) == meta$sample_id)
# Calculamos CPM
calccpm = cpm(seqdata_filter)
# Aparamos os dados, removendo genes com baixa expressão
# é geralmente aceite a eliminação de genes com CPM inferior a 0.5 em mais do que 2 amostras
thresh = calccpm > 0.5
keep = rowSums(thresh) >= 2
counts_keep = seqdata_filter[keep,]
summary(keep)
dim(counts_keep)
# Criação do objeto para a análise de expr. diferencial
dgeObj = DGEList(counts_keep)
names(dgeObj)
head(dgeObj$samples)
## distributions - log transform
logcounts = cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:50], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,51:100], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,101:150], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,151:200], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,201:242], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 10 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:10]
head(select_var)
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
mypalette <- brewer.pal(9,"RdYlBu")
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
#col.cell = c("purple","orange", "green")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
#heatmap.2(highly_variable_lcpm,
#          col=rev(morecols(50)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors=col.cell,scale="row")
col.cell1 = c("purple","orange", "green")[meta$expr]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell1,scale="row")
dgeObj = calcNormFactors(dgeObj)
# demo
plotMD(logcounts, column = 7)
abline(h=0,col="grey")
plotMD(dgeObj, column = 7)
abline(h=0,col="grey")
group = paste(meta$gender, meta$expr, sep = ".")
group = as.character(group)
group
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
# Convert gender to a factor with the correct levels and order
gender = factor(gender, levels = c("male", "female"))
#expr_levels <- levels(meta$expr)
#expr = factor(expr, levels = expr_levels)
expr = sub(".*?\\.", "", group)
expr <- factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ expr + gender)
dgeObj = estimateCommonDisp(dgeObj)
dgeObj$common.dispersion
dgeObj = estimateGLMTrendedDisp(dgeObj)
dgeObj = estimateTagwiseDisp(dgeObj)
plotBCV(dgeObj)
fit = glmFit(dgeObj, design)
head(fit$coefficients)
lrt.BvsL <- glmLRT(fit, coef=3)
topTags(lrt.BvsL)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender = factor(gender, levels = c("male", "female"))
expr = sub(".*?\\.", "", group)
expr = factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ expr + gender)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender = factor(gender, levels = c("male", "female"))
expr = sub(".*?\\.", "", group)
expr = factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ expr + gender)
design
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender = factor(gender, levels = c("male", "female"))
expr = sub(".*?\\.", "", group)
expr = factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ expr + gender)
head(design)
gender = sapply(strsplit(group, ".", fixed=T), function(x) x[1])
gender = factor(gender, levels = c("male", "female"))
expr = sub(".*?\\.", "", group)
expr = factor(expr, levels = c("prox.-prolif.", "prox.-inflam", "TRU"))
# Definir a variável de design
design = model.matrix(~ expr + gender)
head(design)
lrt.BvsL <- glmLRT(fit, coef=3)
topTags(lrt.BvsL)
lrt.BvsL <- glmLRT(fit, coef=0)
topTags(lrt.BvsL)
lrt.BvsL <- glmLRT(fit, coef=1)
topTags(lrt.BvsL)
lrt.BvsL <- glmLRT(fit)
topTags(lrt.BvsL)
lrt.BvsL <- glmLRT(fit, coef = 2)
topTags(lrt.BvsL)
lrt.BvsL <- glmLRT(fit, coef = 4)
topTags(lrt.BvsL)
lrt.BvsL <- glmLRT(fit, coef = 5)
lrt.BvsL <- glmLRT(fit, coef = 0)
topTags(lrt.BvsL)
lrt.BvsL <- glmLRT(fit, coef = 1)
topTags(lrt.BvsL)
lrt.BvsL = glmLRT(fit, coef = 2)
topTags(lrt.BvsL)
lrt.BvsL = glmLRT(fit, coef = 3)
topTags(lrt.BvsL)
lrt.BvsL = glmLRT(fit, coef = 4)
topTags(lrt.BvsL)
lrt.BvsL = glmLRT(fit, coef = 1)
topTags(lrt.BvsL)
results <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results
dim(results)
summary(de <- decideTestsDGE(lrt.BvsL))
lrt.BvsL = glmLRT(fit, coef = 1)
topTags(lrt.BvsL)
resultados = as.data.frame(topTags(lrt.BvsL,n = Inf))
resultados
dim(results)
summary(de = decideTestsDGE(lrt.BvsL))
results <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results
dim(results)
summary(de <- decideTestsDGE(lrt.BvsL))
lrt.BvsL = glmLRT(fit, coef = 1)
topTags(lrt.BvsL)
resultados = as.data.frame(topTags(lrt.BvsL,n = Inf))
resultados
dim(results)
summary(de = decideTestsDGE(lrt.BvsL))
lrt.BvsL = glmLRT(fit, coef = 1)
topTags(lrt.BvsL)
lrt.BvsL = glmLRT(fit, coef = 2)
topTags(lrt.BvsL)
results <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results
dim(results)
summary(de <- decideTestsDGE(lrt.BvsL))
detags <- rownames(dgeObj)[as.logical(de)]
plotSmear(lrt.BvsL, de.tags=detags)
signif <- -log10(results$FDR)
plot(results$logFC,signif,pch=16)
points(results[detags,"logFC"],-log10(results[detags,"FDR"]),pch=16,col="red")
head(dgeObj$samples)
lrt.BvsL = glmLRT(fit, coef = 3)
topTags(lrt.BvsL)
results <- as.data.frame(topTags(lrt.BvsL,n = Inf))
results
dim(results)
summary(de <- decideTestsDGE(lrt.BvsL))
lrt.BvsL = glmLRT(fit, coef = 2)
topTags(lrt.BvsL)
detags <- rownames(dgeObj)[as.logical(de)]
plotSmear(lrt.BvsL, de.tags=detags)
signif <- -log10(results$FDR)
plot(results$logFC,signif,pch=16)
points(results[detags,"logFC"],-log10(results[detags,"FDR"]),pch=16,col="red")
