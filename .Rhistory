dim(meta)
# Corrigir nomes e garantir ordem
# A nomenclatura original tinha extra carateres nos colnames dos dados de epressao
colnames(seqdata) = meta$sample_id
all(names(seqdata) == meta$sample_id)
# Análise exploratória
dim(data_de)
# Análise exploratória
dim(seqdata)
#head(data_de[,1:5])
any(is.na(seqdata))
# Calculamos CPM
calccpm = cpm(data_de)
# Calculamos CPM
calccpm = cpm(seqdata)
# Aparamos os dados, removendo genes com baixa expressão
# é geralmente aceite a eliminação de genes com CPM inferior a 0.5 em mais do que 2 amostras
thresh = calccpm > 0.5
keep = rowSums(thresh) >= 2
counts.keep = seqdata[keep,]
summary(keep)
dim(counts.keep)
# Foram excluídos 28182 genes - ISTO ESTÁ BEM?
dim(seqdata) - dim(counts.keep)
# Calculamos CPM
calccpm = cpm(seqdata)
# Aparamos os dados, removendo genes com baixa expressão
# é geralmente aceite a eliminação de genes com CPM inferior a 0.5 em mais do que 2 amostras
thresh = calccpm > 0.5
keep = rowSums(thresh) >= 2
counts.keep = seqdata[keep,]
summary(keep)
dim(counts.keep)
# Criação do objeto para a análise de expr. diferencial
dgeObj = DGEList(counts.keep)
dgeObj
names(dgeObj)
dgeObj$samples
## distributions - log transform
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
library(reshape2)
## distributions - log transform
library(ggplot2)
logcounts <- cpm(dgeObj,log=TRUE)
logcounts_melted <- melt(logcounts)
ggplot(logcounts_melted, aes(x = variable, y = value)) +
geom_violin() +
labs(x = "", y = "Log2 counts per million") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Violin Plot of Log2 Counts per Million")
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
logcounts_melted <- melt(logcounts)
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
ggplot(logcounts_melted, aes(x = variable, y = value)) +
geom_violin() +
labs(x = "", y = "Log2 counts per million") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Violin Plot of Log2 Counts per Million")
library(ggplot2)
library(reshape2)  # for melt function if needed
# Assuming logcounts is extracted from dgeObj
logcounts <- cpm(dgeObj, log = TRUE)
# Melt the data for plotting
logcounts_melted <- melt(logcounts)
# Create a violin plot
ggplot(logcounts_melted, aes(x = variable, y = value)) +
geom_violin() +
labs(x = "", y = "Log2 counts per million") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Violin Plot of Log2 Counts per Million")
library(ggplot2)
# Assuming dgeObj is your count data object
# Calculate logCPM (counts per million) with log transformation
logcounts <- cpm(dgeObj, log = TRUE)
# Melt the data for ggplot (optional, if you want separate lines for genes)
logcounts_melted <- melt(logcounts)  # This step can be omitted if not needed
# Create the boxplot with ggplot2
ggplot(logcounts_melted, aes(x = variable, y = value)) +  # Use melted data if applicable
geom_boxplot(notch = TRUE) +  # Add notches for better variability representation
labs(title = "Boxplots of logCPMs (unnormalised)", x = "Gene", y = "Log2 counts per million") +
theme_classic()  # Choose a theme (optional)
logcounts_melted
abline(h=median(logcounts_melted),col="blue")
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
logcounts_melted <- melt(logcounts)
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts_melted),col="blue")
boxplot(logcounts_melted, xlab="", ylab="Log2 counts per million",las=2)
# Assuming your data is stored in a numeric vector named 'data'
library(ggplot2)
ggplot(aes(x = factor(1), y = logcounts)) +  # Set x to a factor to avoid jittering for large datasets
geom_boxplot(notch = TRUE, aes(fill = ..level..)) +  # Add notch for better variability representation, colored by level
labs(title = "Distribution of your Data", x = "", y = "Value") +  # Customize labels and title
theme_classic()  # Choose a theme (optional)
gc()
# Assuming your data is stored in a numeric vector named 'data'
library(ggplot2)
ggplot(data = logcounts, aes(x = factor(1), y = data)) +  # Set x to a factor to avoid jittering for large datasets
geom_boxplot(notch = TRUE, aes(fill = ..level..)) +  # Add notch for better variability representation, colored by level
labs(title = "Distribution of your Data", x = "", y = "Value") +  # Customize labels and title
theme_classic()  # Choose a theme (optional)
# Assuming your data is stored in a numeric vector named 'data'
library(ggplot2)
ggplot(data = logcounts, aes(x = factor(1), y = value)) +
geom_boxplot(notch = TRUE, aes(fill = ..x..)) +
labs(title = "Distribution of Log-transformed Counts", x = "", y = "Log2 counts per million") +
theme_classic()
# Assuming your data is stored in a numeric vector named 'data'
library(ggplot2)
ggplot(logcounts, aes(x = factor(1), y = value)) +
geom_boxplot(notch = TRUE, aes(fill = ..x..)) +
labs(title = "Distribution of Log-transformed Counts", x = "", y = "Log2 counts per million") +
theme_classic()
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
ggplot(data = logcounts, aes(x = factor(1), y = data)) +
geom_boxplot(notch = TRUE, aes(fill = ..level..), color = "blue") +
labs(title = "Distribution of your Data", x = "", y = "Log2 counts per million") +
theme_classic()
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts[1:5], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts[1:10], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts[1:600], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
class(logcounts)
logcounts[1:5]
logcounts
head(logcounts)
logcounts[,1:5]
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:10], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:100], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:200], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:100], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
boxplot(logcounts[,301:400], xlab="", ylab="Log2 counts per million",las=2)
## distributions - log transform
library(ggplot2)
library(reshape2)
logcounts <- cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:100], xlab="", ylab="Log2 counts per million",las=2)
boxplot(logcounts[,101:200], xlab="", ylab="Log2 counts per million",las=2)
boxplot(logcounts[,201:300], xlab="", ylab="Log2 counts per million",las=2)
boxplot(logcounts[,301:400], xlab="", ylab="Log2 counts per million",las=2)
boxplot(logcounts[,401:500], xlab="", ylab="Log2 counts per million",las=2)
boxplot(logcounts[,501:600], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Vou encontrar uma forma mais bonita de fazer isto
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumor_stage]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumor_stage]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumor_stage]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(600)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumor_stage]
heatmap.2(highly_variable_lcpm,
col=rev(morecols),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
colors = morecols(50)
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
colors = morecols(50)
col.cell <- c("purple","orange")[meta$tumor_stage]
heatmap.2(highly_variable_lcpm,
col=rev(colors),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
colors = morecols(50)
col.cell <- c("purple","orange")
heatmap.2(highly_variable_lcpm,
col=rev(colors),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors = col.cell,
scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
colors = morecols(50)
col.cell <- c("purple","orange")[meta$sample_id]
heatmap.2(highly_variable_lcpm,
col=rev(colors),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors = col.cell,
scale="row")
# Normalização
dgeObj = calcNormFactors(dgeObj)
# demo
plotMD(logcounts, column = 7)
abline(h=0,col="grey")
plotMD(dgeObj, column = 7)
abline(h=0,col="grey")
head(highly_variable_lcpm)
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$sample_id]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
class(highly_variable_lcpm)
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage]
heatmap.2(highly_variable_lcpm[,1:5],
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage[,1:5]]
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage[1:5]]
heatmap.2(highly_variable_lcpm[,1:5],
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage[1:5]]
heatmap.2(highly_variable_lcpm[,1:5],
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage[1:100]]
heatmap.2(highly_variable_lcpm[,1:100],
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage]
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage[1:50]]
heatmap.2(highly_variable_lcpm[,1:50],
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
## heatmaps
var_genes <- apply(logcounts, 1, var)
#head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
#head(select_var)
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
#head(highly_variable_lcpm)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- c("purple","orange")[meta$tumour_stage[1:10]]
heatmap.2(highly_variable_lcpm[,1:10],
col=rev(morecols(50)),
trace="column",
main="Top 500 most variable genes across samples",
ColSideColors=col.cell,scale="row")
names(meta$tumour_stage)
names(meta$tumour_stage)
colnames(meta$tumour_stage)
rownames(meta$tumour_stage)
meta$tumour_stage
levels(meta$tumour_stage)
meta$tumour_stage['Stage I']
meta$tumour_stage['Stage I']
meta$tumour_stage == "Stage I"
levels(meta$tumour_stage)
meta$tumour_stage == Stage IIIB"
meta$tumour_stage == "Stage IIIB"
meta$tumour_stage
as.factor(meta$tumour_stage)
