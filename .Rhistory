#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
# Carregamento de metadados
gender = luad_data$gender
sample_id = luad_data$barcode
expr = luad_data$paper_expression_subtype
meta = data.frame(sample_id = sample_id, gender = gender, expr = expr)
# Limpeza dos dados e tratamento
any(is.na(meta$gender))
# Converte 'gender' para factor com dois níveis
meta$gender = factor(meta$gender, levels = c("male", "female"))
meta = meta[!is.na(meta$gender),]
table(meta$gender)
filter = meta$gender != '[Not Available]'
meta = meta[filter,]
any(is.na(meta$expr))
meta = meta[!is.na(meta$expr),]
table(meta$expr)
filter = meta$expr != '[Not Available]'
meta = meta[filter,]
# Criar uma vista dos dados de RNASeq com base nos oncogenes
seqdata_filter = seqdata[,meta$expr]
# Limpeza dos dados e tratamento
any(is.na(meta$gender))
# Converte 'gender' para factor com dois níveis
meta$gender = factor(meta$gender, levels = c("male", "female"))
table(meta$gender)
filter = meta$gender != '[Not Available]'
meta = meta[filter,]
any(is.na(meta$expr))
meta = meta[!is.na(meta$expr),]
table(meta$expr)
filter = meta$expr != '[Not Available]'
meta = meta[filter,]
# Criar uma vista dos dados de RNASeq com base nos oncogenes
seqdata_filter = seqdata[,meta$expr]
# Limpeza dos dados e tratamento relativo ao género
any(is.na(meta$gender))
# Converte 'gender' para factor com dois níveis
meta$gender = factor(meta$gender, levels = c("male", "female"))
table(meta$gender)
filter = meta$gender != '[Not Available]'
meta = meta[filter,]
any(is.na(meta$expr))
meta = meta[!is.na(meta$expr),]
table(meta$expr)
filter = meta$expr != '[Not Available]'
meta = meta[filter,]
# Criar uma vista dos dados de RNASeq com base nos subtipos de expressão
seqdata_filter = seqdata[,meta$expr]
# Garantir que as dims estão corretas
dim(seqdata_filter)
dim(meta)
# Corrigir nomes e garantir ordem
colnames(seqdata_filter) = meta$sample_id
all(names(seqdata_filter) == meta$sample_id)
# Calculamos CPM
calccpm = cpm(seqdata_filter)
# Aparamos os dados, removendo genes com baixa expressão
# é geralmente aceite a eliminação de genes com CPM inferior a 0.5 em mais do que 2 amostras
thresh = calccpm > 0.5
keep = rowSums(thresh) >= 2
counts_keep = seqdata_filter[keep,]
summary(keep)
dim(counts_keep)
# Criação do objeto para a análise de expr. diferencial
dgeObj = DGEList(counts_keep)
names(dgeObj)
head(dgeObj$samples)
## distributions - log transform
logcounts = cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:50], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,51:100], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,101:150], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,151:200], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,201:242], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 10 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:10]
head(select_var)
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
mypalette <- brewer.pal(9,"Pastel1")
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
col.cell = c("purple","orange")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
mypalette <- brewer.pal(9,"Pastel1")
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
col.cell = c("purple","orange", "red")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
mypalette <- brewer.pal(9,"RdYlBu")
#Pastel1
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
col.cell = c("purple","orange", "red")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
# Carregamento de metadados
gender = luad_data$gender
sample_id = luad_data$patient
expr = luad_data$paper_expression_subtype
meta = data.frame(sample_id = sample_id, gender = gender, expr = expr)
# Limpeza dos dados e tratamento relativo ao género
any(is.na(meta$gender))
# Converte 'gender' para factor com dois níveis
meta$gender = factor(meta$gender, levels = c("male", "female"))
table(meta$gender)
filter = meta$gender != '[Not Available]'
meta = meta[filter,]
any(is.na(meta$expr))
meta = meta[!is.na(meta$expr),]
table(meta$expr)
filter = meta$expr != '[Not Available]'
meta = meta[filter,]
# Criar uma vista dos dados de RNASeq com base nos subtipos de expressão
seqdata_filter = seqdata[,meta$expr]
# Garantir que as dims estão corretas
dim(seqdata_filter)
dim(meta)
# Corrigir nomes e garantir ordem
colnames(seqdata_filter) = meta$sample_id
all(names(seqdata_filter) == meta$sample_id)
# Calculamos CPM
calccpm = cpm(seqdata_filter)
# Aparamos os dados, removendo genes com baixa expressão
# é geralmente aceite a eliminação de genes com CPM inferior a 0.5 em mais do que 2 amostras
thresh = calccpm > 0.5
keep = rowSums(thresh) >= 2
counts_keep = seqdata_filter[keep,]
summary(keep)
dim(counts_keep)
# Criação do objeto para a análise de expr. diferencial
dgeObj = DGEList(counts_keep)
names(dgeObj)
head(dgeObj$samples)
## distributions - log transform
logcounts = cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:50], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,51:100], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,101:150], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,151:200], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,201:242], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 10 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:10]
head(select_var)
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
mypalette <- brewer.pal(9,"RdYlBu")
#Pastel1
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
col.cell = c("purple","orange", "red")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
# Carregamento de metadados
gender = luad_data$gender
sample_id = luad_data$sample_id
expr = luad_data$paper_expression_subtype
meta = data.frame(sample_id = sample_id, gender = gender, expr = expr)
# Limpeza dos dados e tratamento relativo ao género
any(is.na(meta$gender))
# Converte 'gender' para factor com dois níveis
meta$gender = factor(meta$gender, levels = c("male", "female"))
table(meta$gender)
filter = meta$gender != '[Not Available]'
meta = meta[filter,]
any(is.na(meta$expr))
meta = meta[!is.na(meta$expr),]
table(meta$expr)
filter = meta$expr != '[Not Available]'
meta = meta[filter,]
# Criar uma vista dos dados de RNASeq com base nos subtipos de expressão
seqdata_filter = seqdata[,meta$expr]
# Garantir que as dims estão corretas
dim(seqdata_filter)
dim(meta)
# Corrigir nomes e garantir ordem
colnames(seqdata_filter) = meta$sample_id
all(names(seqdata_filter) == meta$sample_id)
# Calculamos CPM
calccpm = cpm(seqdata_filter)
# Aparamos os dados, removendo genes com baixa expressão
# é geralmente aceite a eliminação de genes com CPM inferior a 0.5 em mais do que 2 amostras
thresh = calccpm > 0.5
keep = rowSums(thresh) >= 2
counts_keep = seqdata_filter[keep,]
summary(keep)
dim(counts_keep)
# Criação do objeto para a análise de expr. diferencial
dgeObj = DGEList(counts_keep)
names(dgeObj)
head(dgeObj$samples)
## distributions - log transform
logcounts = cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:50], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,51:100], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,101:150], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,151:200], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,201:242], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 10 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:10]
head(select_var)
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
mypalette <- brewer.pal(9,"RdYlBu")
#Pastel1
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
col.cell = c("purple","orange", "red")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
sample_id
# Carregamento de metadados
gender = luad_data$gender
sample_id = substr(luad_data$sample_id, 1, 10)
expr = luad_data$paper_expression_subtype
meta = data.frame(sample_id = sample_id, gender = gender, expr = expr)
colnames(countdata_edge) <- substr(colnames(countdata_edge), 1, 7)
# Carregamento de metadados
gender = luad_data$gender
sample_id = substr(luad_data$sample_id, 1, 10)
expr = luad_data$paper_expression_subtype
meta = data.frame(sample_id = sample_id, gender = gender, expr = expr)
# Limpeza dos dados e tratamento relativo ao género
any(is.na(meta$gender))
# Converte 'gender' para factor com dois níveis
meta$gender = factor(meta$gender, levels = c("male", "female"))
table(meta$gender)
filter = meta$gender != '[Not Available]'
meta = meta[filter,]
any(is.na(meta$expr))
meta = meta[!is.na(meta$expr),]
table(meta$expr)
filter = meta$expr != '[Not Available]'
meta = meta[filter,]
# Criar uma vista dos dados de RNASeq com base nos subtipos de expressão
seqdata_filter = seqdata[,meta$expr]
# Garantir que as dims estão corretas
dim(seqdata_filter)
dim(meta)
# Corrigir nomes e garantir ordem
colnames(seqdata_filter) = meta$sample_id
all(names(seqdata_filter) == meta$sample_id)
# Calculamos CPM
calccpm = cpm(seqdata_filter)
# Aparamos os dados, removendo genes com baixa expressão
# é geralmente aceite a eliminação de genes com CPM inferior a 0.5 em mais do que 2 amostras
thresh = calccpm > 0.5
keep = rowSums(thresh) >= 2
counts_keep = seqdata_filter[keep,]
summary(keep)
dim(counts_keep)
# Criação do objeto para a análise de expr. diferencial
dgeObj = DGEList(counts_keep)
names(dgeObj)
head(dgeObj$samples)
## distributions - log transform
logcounts = cpm(dgeObj,log=TRUE)
boxplot(logcounts[,1:50], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,51:100], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,101:150], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,151:200], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
boxplot(logcounts[,201:242], xlab="", ylab="Log2 counts per million",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Cálculo da variância de cada gene nos dados de contagem logaritmizada
var_genes = apply(logcounts, 1, var)
# Seleção dos 10 genes com maior variabilidade
select_var = names(sort(var_genes, decreasing=TRUE))[1:10]
head(select_var)
# Seleciona as linhas da matriz 'logcounts' com base nos índices fornecidos em 'select_var'
highly_variable_lcpm = logcounts[select_var,]
# Calcula as dimensões (número de linhas e colunas) da matriz 'highly_variable_lcpm'
dim(highly_variable_lcpm)
mypalette <- brewer.pal(9,"RdYlBu")
#Pastel1
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
col.cell = c("purple","orange", "red")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
mypalette <- brewer.pal(9,"RdYlBu")
#Pastel1
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
col.cell = c("purple","orange", "green")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
mypalette <- brewer.pal(11,"RdYlBu")
#Pastel1
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
col.cell = c("purple","orange", "green")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
mypalette <- brewer.pal(9,"RdYlBu")
#Pastel1
morecols <- colorRampPalette(mypalette)
#indices = 1:242
#unique_stages = unique(meta$oncogene[indices])
#cores = length(unique_stages)
#stage_pal = brewer.pal(9,'Set1')
#stage_cols = colorRampPalette(stage_pal)
#col.cell = stage_cols(length(unique_stages))
#col.cell <- stage_cols(cores)[meta$oncogene[indices]]
col.cell = c("purple","orange", "green")[meta$expr]
#color_mapping <- setNames(col.cell, unique_stages)
#heatmap.2(highly_variable_lcpm[,indices],
#          col=rev(morecols(5)),
#          trace="column",
#          main="Top 10 most variable genes across samples",
#          ColSideColors = col.cell,
#          scale="row"
#          )
heatmap.2(highly_variable_lcpm,
col=rev(morecols(50)),
trace="column",
main="Top 10 most variable genes across samples",
ColSideColors=col.cell,scale="row")
